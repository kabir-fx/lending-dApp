/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getUnitDecoder,
  getUnitEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from 'gill';

/**
 * Pyth price updates are bridged to all blockchains via Wormhole.
 * Using the price updates on another chain requires verifying the signatures of the Wormhole guardians.
 * The usual process is to check the signatures for two thirds of the total number of guardians, but this can be cumbersome on Solana because of the transaction size limits,
 * so we also allow for partial verification.
 *
 * This enum represents how much a price update has been verified:
 * - If `Full`, we have verified the signatures for two thirds of the current guardians.
 * - If `Partial`, only `num_signatures` guardian signatures have been checked.
 *
 * # Warning
 * Using partially verified price updates is dangerous, as it lowers the threshold of guardians that need to collude to produce a malicious price update.
 */
export type VerificationLevel =
  | { __kind: 'Partial'; numSignatures: number }
  | { __kind: 'Full' };

export type VerificationLevelArgs = VerificationLevel;

export function getVerificationLevelEncoder(): Encoder<VerificationLevelArgs> {
  return getDiscriminatedUnionEncoder([
    ['Partial', getStructEncoder([['numSignatures', getU8Encoder()]])],
    ['Full', getUnitEncoder()],
  ]);
}

export function getVerificationLevelDecoder(): Decoder<VerificationLevel> {
  return getDiscriminatedUnionDecoder([
    ['Partial', getStructDecoder([['numSignatures', getU8Decoder()]])],
    ['Full', getUnitDecoder()],
  ]);
}

export function getVerificationLevelCodec(): Codec<
  VerificationLevelArgs,
  VerificationLevel
> {
  return combineCodec(
    getVerificationLevelEncoder(),
    getVerificationLevelDecoder()
  );
}

// Data Enum Helpers.
export function verificationLevel(
  kind: 'Partial',
  data: GetDiscriminatedUnionVariantContent<
    VerificationLevelArgs,
    '__kind',
    'Partial'
  >
): GetDiscriminatedUnionVariant<VerificationLevelArgs, '__kind', 'Partial'>;
export function verificationLevel(
  kind: 'Full'
): GetDiscriminatedUnionVariant<VerificationLevelArgs, '__kind', 'Full'>;
export function verificationLevel<
  K extends VerificationLevelArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isVerificationLevel<K extends VerificationLevel['__kind']>(
  kind: K,
  value: VerificationLevel
): value is VerificationLevel & { __kind: K } {
  return value.__kind === kind;
}
