/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from 'gill';

export type PriceFeedMessage = {
  /** `FeedId` but avoid the type alias because of compatibility issues with Anchor's `idl-build` feature. */
  feedId: ReadonlyUint8Array;
  price: bigint;
  conf: bigint;
  exponent: number;
  /** The timestamp of this price update in seconds */
  publishTime: bigint;
  /**
   * The timestamp of the previous price update. This field is intended to allow users to
   * identify the single unique price update for any moment in time:
   * for any time t, the unique update is the one such that prev_publish_time < t <= publish_time.
   *
   * Note that there may not be such an update while we are migrating to the new message-sending logic,
   * as some price updates on pythnet may not be sent to other chains (because the message-sending
   * logic may not have triggered). We can solve this problem by making the message-sending mandatory
   * (which we can do once publishers have migrated over).
   *
   * Additionally, this field may be equal to publish_time if the message is sent on a slot where
   * where the aggregation was unsuccesful. This problem will go away once all publishers have
   * migrated over to a recent version of pyth-agent.
   */
  prevPublishTime: bigint;
  emaPrice: bigint;
  emaConf: bigint;
};

export type PriceFeedMessageArgs = {
  /** `FeedId` but avoid the type alias because of compatibility issues with Anchor's `idl-build` feature. */
  feedId: ReadonlyUint8Array;
  price: number | bigint;
  conf: number | bigint;
  exponent: number;
  /** The timestamp of this price update in seconds */
  publishTime: number | bigint;
  /**
   * The timestamp of the previous price update. This field is intended to allow users to
   * identify the single unique price update for any moment in time:
   * for any time t, the unique update is the one such that prev_publish_time < t <= publish_time.
   *
   * Note that there may not be such an update while we are migrating to the new message-sending logic,
   * as some price updates on pythnet may not be sent to other chains (because the message-sending
   * logic may not have triggered). We can solve this problem by making the message-sending mandatory
   * (which we can do once publishers have migrated over).
   *
   * Additionally, this field may be equal to publish_time if the message is sent on a slot where
   * where the aggregation was unsuccesful. This problem will go away once all publishers have
   * migrated over to a recent version of pyth-agent.
   */
  prevPublishTime: number | bigint;
  emaPrice: number | bigint;
  emaConf: number | bigint;
};

export function getPriceFeedMessageEncoder(): FixedSizeEncoder<PriceFeedMessageArgs> {
  return getStructEncoder([
    ['feedId', fixEncoderSize(getBytesEncoder(), 32)],
    ['price', getI64Encoder()],
    ['conf', getU64Encoder()],
    ['exponent', getI32Encoder()],
    ['publishTime', getI64Encoder()],
    ['prevPublishTime', getI64Encoder()],
    ['emaPrice', getI64Encoder()],
    ['emaConf', getU64Encoder()],
  ]);
}

export function getPriceFeedMessageDecoder(): FixedSizeDecoder<PriceFeedMessage> {
  return getStructDecoder([
    ['feedId', fixDecoderSize(getBytesDecoder(), 32)],
    ['price', getI64Decoder()],
    ['conf', getU64Decoder()],
    ['exponent', getI32Decoder()],
    ['publishTime', getI64Decoder()],
    ['prevPublishTime', getI64Decoder()],
    ['emaPrice', getI64Decoder()],
    ['emaConf', getU64Decoder()],
  ]);
}

export function getPriceFeedMessageCodec(): FixedSizeCodec<
  PriceFeedMessageArgs,
  PriceFeedMessage
> {
  return combineCodec(
    getPriceFeedMessageEncoder(),
    getPriceFeedMessageDecoder()
  );
}
