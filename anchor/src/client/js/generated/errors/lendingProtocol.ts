/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { LENDING_PROTOCOL_PROGRAM_ADDRESS } from '../programs';

/** InsufficientFunds: User has not deposited enough tokens to withdraw */
export const LENDING_PROTOCOL_ERROR__INSUFFICIENT_FUNDS = 0x1770; // 6000
/** OverBorrowableAmount: Requested amount to borrow is greater than the borrowable amount */
export const LENDING_PROTOCOL_ERROR__OVER_BORROWABLE_AMOUNT = 0x1771; // 6001
/** OverRepay: User has not borrowed enough tokens to repay */
export const LENDING_PROTOCOL_ERROR__OVER_REPAY = 0x1772; // 6002
/** AccountNotUnhealthy: User's account is not unhealthy */
export const LENDING_PROTOCOL_ERROR__ACCOUNT_NOT_UNHEALTHY = 0x1773; // 6003

export type LendingProtocolError =
  | typeof LENDING_PROTOCOL_ERROR__ACCOUNT_NOT_UNHEALTHY
  | typeof LENDING_PROTOCOL_ERROR__INSUFFICIENT_FUNDS
  | typeof LENDING_PROTOCOL_ERROR__OVER_BORROWABLE_AMOUNT
  | typeof LENDING_PROTOCOL_ERROR__OVER_REPAY;

let lendingProtocolErrorMessages:
  | Record<LendingProtocolError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  lendingProtocolErrorMessages = {
    [LENDING_PROTOCOL_ERROR__ACCOUNT_NOT_UNHEALTHY]: `User's account is not unhealthy`,
    [LENDING_PROTOCOL_ERROR__INSUFFICIENT_FUNDS]: `User has not deposited enough tokens to withdraw`,
    [LENDING_PROTOCOL_ERROR__OVER_BORROWABLE_AMOUNT]: `Requested amount to borrow is greater than the borrowable amount`,
    [LENDING_PROTOCOL_ERROR__OVER_REPAY]: `User has not borrowed enough tokens to repay`,
  };
}

export function getLendingProtocolErrorMessage(
  code: LendingProtocolError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      lendingProtocolErrorMessages as Record<LendingProtocolError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isLendingProtocolError<
  TProgramErrorCode extends LendingProtocolError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    LENDING_PROTOCOL_PROGRAM_ADDRESS,
    code
  );
}
