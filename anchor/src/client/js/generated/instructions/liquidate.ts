/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { LENDING_PROTOCOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const LIQUIDATE_DISCRIMINATOR = new Uint8Array([
  223, 179, 226, 125, 48, 46, 39, 74,
]);

export function getLiquidateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LIQUIDATE_DISCRIMINATOR);
}

export type LiquidateInstruction<
  TProgram extends string = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
  TAccountLiquidator extends string | AccountMeta<string> = string,
  TAccountPriceUpdateAccount extends string | AccountMeta<string> = string,
  TAccountCollateralMint extends string | AccountMeta<string> = string,
  TAccountBorrowedMint extends string | AccountMeta<string> = string,
  TAccountCollateralBank extends string | AccountMeta<string> = string,
  TAccountCollateralBankTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountBorrowedBank extends string | AccountMeta<string> = string,
  TAccountBorrowedBankTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountLiquidatorUserAccount extends string | AccountMeta<string> = string,
  TAccountLiquidatorBorrowedTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountLiquidatorCollateralTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountLiquidator extends string
        ? WritableSignerAccount<TAccountLiquidator> &
            AccountSignerMeta<TAccountLiquidator>
        : TAccountLiquidator,
      TAccountPriceUpdateAccount extends string
        ? WritableAccount<TAccountPriceUpdateAccount>
        : TAccountPriceUpdateAccount,
      TAccountCollateralMint extends string
        ? ReadonlyAccount<TAccountCollateralMint>
        : TAccountCollateralMint,
      TAccountBorrowedMint extends string
        ? ReadonlyAccount<TAccountBorrowedMint>
        : TAccountBorrowedMint,
      TAccountCollateralBank extends string
        ? WritableAccount<TAccountCollateralBank>
        : TAccountCollateralBank,
      TAccountCollateralBankTokenAccount extends string
        ? WritableAccount<TAccountCollateralBankTokenAccount>
        : TAccountCollateralBankTokenAccount,
      TAccountBorrowedBank extends string
        ? WritableAccount<TAccountBorrowedBank>
        : TAccountBorrowedBank,
      TAccountBorrowedBankTokenAccount extends string
        ? WritableAccount<TAccountBorrowedBankTokenAccount>
        : TAccountBorrowedBankTokenAccount,
      TAccountLiquidatorUserAccount extends string
        ? WritableAccount<TAccountLiquidatorUserAccount>
        : TAccountLiquidatorUserAccount,
      TAccountLiquidatorBorrowedTokenAccount extends string
        ? WritableAccount<TAccountLiquidatorBorrowedTokenAccount>
        : TAccountLiquidatorBorrowedTokenAccount,
      TAccountLiquidatorCollateralTokenAccount extends string
        ? WritableAccount<TAccountLiquidatorCollateralTokenAccount>
        : TAccountLiquidatorCollateralTokenAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type LiquidateInstructionData = { discriminator: ReadonlyUint8Array };

export type LiquidateInstructionDataArgs = {};

export function getLiquidateInstructionDataEncoder(): FixedSizeEncoder<LiquidateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: LIQUIDATE_DISCRIMINATOR })
  );
}

export function getLiquidateInstructionDataDecoder(): FixedSizeDecoder<LiquidateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getLiquidateInstructionDataCodec(): FixedSizeCodec<
  LiquidateInstructionDataArgs,
  LiquidateInstructionData
> {
  return combineCodec(
    getLiquidateInstructionDataEncoder(),
    getLiquidateInstructionDataDecoder()
  );
}

export type LiquidateAsyncInput<
  TAccountLiquidator extends string = string,
  TAccountPriceUpdateAccount extends string = string,
  TAccountCollateralMint extends string = string,
  TAccountBorrowedMint extends string = string,
  TAccountCollateralBank extends string = string,
  TAccountCollateralBankTokenAccount extends string = string,
  TAccountBorrowedBank extends string = string,
  TAccountBorrowedBankTokenAccount extends string = string,
  TAccountLiquidatorUserAccount extends string = string,
  TAccountLiquidatorBorrowedTokenAccount extends string = string,
  TAccountLiquidatorCollateralTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  liquidator: TransactionSigner<TAccountLiquidator>;
  priceUpdateAccount: Address<TAccountPriceUpdateAccount>;
  /** Mints for the collateral and borrowed asset */
  collateralMint: Address<TAccountCollateralMint>;
  borrowedMint: Address<TAccountBorrowedMint>;
  /**
   * Defining borrowed and collateral bank account for there respective token accounts
   * Collateral bank account
   */
  collateralBank?: Address<TAccountCollateralBank>;
  /** Collateral Bank token account */
  collateralBankTokenAccount?: Address<TAccountCollateralBankTokenAccount>;
  /** Borrowed bank account */
  borrowedBank?: Address<TAccountBorrowedBank>;
  /** Borrowed Bank token account */
  borrowedBankTokenAccount?: Address<TAccountBorrowedBankTokenAccount>;
  /** User account for the liquidator */
  liquidatorUserAccount: Address<TAccountLiquidatorUserAccount>;
  /** Liquidator's borrowed token account */
  liquidatorBorrowedTokenAccount?: Address<TAccountLiquidatorBorrowedTokenAccount>;
  /** Liquidator's collateral token account */
  liquidatorCollateralTokenAccount?: Address<TAccountLiquidatorCollateralTokenAccount>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Associated token program */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
};

export async function getLiquidateInstructionAsync<
  TAccountLiquidator extends string,
  TAccountPriceUpdateAccount extends string,
  TAccountCollateralMint extends string,
  TAccountBorrowedMint extends string,
  TAccountCollateralBank extends string,
  TAccountCollateralBankTokenAccount extends string,
  TAccountBorrowedBank extends string,
  TAccountBorrowedBankTokenAccount extends string,
  TAccountLiquidatorUserAccount extends string,
  TAccountLiquidatorBorrowedTokenAccount extends string,
  TAccountLiquidatorCollateralTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
>(
  input: LiquidateAsyncInput<
    TAccountLiquidator,
    TAccountPriceUpdateAccount,
    TAccountCollateralMint,
    TAccountBorrowedMint,
    TAccountCollateralBank,
    TAccountCollateralBankTokenAccount,
    TAccountBorrowedBank,
    TAccountBorrowedBankTokenAccount,
    TAccountLiquidatorUserAccount,
    TAccountLiquidatorBorrowedTokenAccount,
    TAccountLiquidatorCollateralTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  LiquidateInstruction<
    TProgramAddress,
    TAccountLiquidator,
    TAccountPriceUpdateAccount,
    TAccountCollateralMint,
    TAccountBorrowedMint,
    TAccountCollateralBank,
    TAccountCollateralBankTokenAccount,
    TAccountBorrowedBank,
    TAccountBorrowedBankTokenAccount,
    TAccountLiquidatorUserAccount,
    TAccountLiquidatorBorrowedTokenAccount,
    TAccountLiquidatorCollateralTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LENDING_PROTOCOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    liquidator: { value: input.liquidator ?? null, isWritable: true },
    priceUpdateAccount: {
      value: input.priceUpdateAccount ?? null,
      isWritable: true,
    },
    collateralMint: { value: input.collateralMint ?? null, isWritable: false },
    borrowedMint: { value: input.borrowedMint ?? null, isWritable: false },
    collateralBank: { value: input.collateralBank ?? null, isWritable: true },
    collateralBankTokenAccount: {
      value: input.collateralBankTokenAccount ?? null,
      isWritable: true,
    },
    borrowedBank: { value: input.borrowedBank ?? null, isWritable: true },
    borrowedBankTokenAccount: {
      value: input.borrowedBankTokenAccount ?? null,
      isWritable: true,
    },
    liquidatorUserAccount: {
      value: input.liquidatorUserAccount ?? null,
      isWritable: true,
    },
    liquidatorBorrowedTokenAccount: {
      value: input.liquidatorBorrowedTokenAccount ?? null,
      isWritable: true,
    },
    liquidatorCollateralTokenAccount: {
      value: input.liquidatorCollateralTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.collateralBank.value) {
    accounts.collateralBank.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.collateralMint.value)
        ),
      ],
    });
  }
  if (!accounts.collateralBankTokenAccount.value) {
    accounts.collateralBankTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([84, 114, 101, 97, 115, 117, 114, 121])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.collateralMint.value)
        ),
      ],
    });
  }
  if (!accounts.borrowedBank.value) {
    accounts.borrowedBank.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.borrowedMint.value)),
      ],
    });
  }
  if (!accounts.borrowedBankTokenAccount.value) {
    accounts.borrowedBankTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([84, 114, 101, 97, 115, 117, 114, 121])
        ),
        getAddressEncoder().encode(expectAddress(accounts.borrowedMint.value)),
      ],
    });
  }
  if (!accounts.liquidatorBorrowedTokenAccount.value) {
    accounts.liquidatorBorrowedTokenAccount.value =
      await getProgramDerivedAddress({
        programAddress:
          'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
        seeds: [
          getAddressEncoder().encode(
            expectAddress(accounts.liquidatorUserAccount.value)
          ),
          getBytesEncoder().encode(
            new Uint8Array([
              6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
              121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
              126, 255, 0, 169,
            ])
          ),
          getAddressEncoder().encode(
            expectAddress(accounts.borrowedMint.value)
          ),
        ],
      });
  }
  if (!accounts.liquidatorCollateralTokenAccount.value) {
    accounts.liquidatorCollateralTokenAccount.value =
      await getProgramDerivedAddress({
        programAddress:
          'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
        seeds: [
          getAddressEncoder().encode(
            expectAddress(accounts.liquidatorUserAccount.value)
          ),
          getBytesEncoder().encode(
            new Uint8Array([
              6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
              121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
              126, 255, 0, 169,
            ])
          ),
          getAddressEncoder().encode(
            expectAddress(accounts.collateralMint.value)
          ),
        ],
      });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.liquidator),
      getAccountMeta(accounts.priceUpdateAccount),
      getAccountMeta(accounts.collateralMint),
      getAccountMeta(accounts.borrowedMint),
      getAccountMeta(accounts.collateralBank),
      getAccountMeta(accounts.collateralBankTokenAccount),
      getAccountMeta(accounts.borrowedBank),
      getAccountMeta(accounts.borrowedBankTokenAccount),
      getAccountMeta(accounts.liquidatorUserAccount),
      getAccountMeta(accounts.liquidatorBorrowedTokenAccount),
      getAccountMeta(accounts.liquidatorCollateralTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    data: getLiquidateInstructionDataEncoder().encode({}),
    programAddress,
  } as LiquidateInstruction<
    TProgramAddress,
    TAccountLiquidator,
    TAccountPriceUpdateAccount,
    TAccountCollateralMint,
    TAccountBorrowedMint,
    TAccountCollateralBank,
    TAccountCollateralBankTokenAccount,
    TAccountBorrowedBank,
    TAccountBorrowedBankTokenAccount,
    TAccountLiquidatorUserAccount,
    TAccountLiquidatorBorrowedTokenAccount,
    TAccountLiquidatorCollateralTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >);
}

export type LiquidateInput<
  TAccountLiquidator extends string = string,
  TAccountPriceUpdateAccount extends string = string,
  TAccountCollateralMint extends string = string,
  TAccountBorrowedMint extends string = string,
  TAccountCollateralBank extends string = string,
  TAccountCollateralBankTokenAccount extends string = string,
  TAccountBorrowedBank extends string = string,
  TAccountBorrowedBankTokenAccount extends string = string,
  TAccountLiquidatorUserAccount extends string = string,
  TAccountLiquidatorBorrowedTokenAccount extends string = string,
  TAccountLiquidatorCollateralTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  liquidator: TransactionSigner<TAccountLiquidator>;
  priceUpdateAccount: Address<TAccountPriceUpdateAccount>;
  /** Mints for the collateral and borrowed asset */
  collateralMint: Address<TAccountCollateralMint>;
  borrowedMint: Address<TAccountBorrowedMint>;
  /**
   * Defining borrowed and collateral bank account for there respective token accounts
   * Collateral bank account
   */
  collateralBank: Address<TAccountCollateralBank>;
  /** Collateral Bank token account */
  collateralBankTokenAccount: Address<TAccountCollateralBankTokenAccount>;
  /** Borrowed bank account */
  borrowedBank: Address<TAccountBorrowedBank>;
  /** Borrowed Bank token account */
  borrowedBankTokenAccount: Address<TAccountBorrowedBankTokenAccount>;
  /** User account for the liquidator */
  liquidatorUserAccount: Address<TAccountLiquidatorUserAccount>;
  /** Liquidator's borrowed token account */
  liquidatorBorrowedTokenAccount: Address<TAccountLiquidatorBorrowedTokenAccount>;
  /** Liquidator's collateral token account */
  liquidatorCollateralTokenAccount: Address<TAccountLiquidatorCollateralTokenAccount>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Associated token program */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
};

export function getLiquidateInstruction<
  TAccountLiquidator extends string,
  TAccountPriceUpdateAccount extends string,
  TAccountCollateralMint extends string,
  TAccountBorrowedMint extends string,
  TAccountCollateralBank extends string,
  TAccountCollateralBankTokenAccount extends string,
  TAccountBorrowedBank extends string,
  TAccountBorrowedBankTokenAccount extends string,
  TAccountLiquidatorUserAccount extends string,
  TAccountLiquidatorBorrowedTokenAccount extends string,
  TAccountLiquidatorCollateralTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
>(
  input: LiquidateInput<
    TAccountLiquidator,
    TAccountPriceUpdateAccount,
    TAccountCollateralMint,
    TAccountBorrowedMint,
    TAccountCollateralBank,
    TAccountCollateralBankTokenAccount,
    TAccountBorrowedBank,
    TAccountBorrowedBankTokenAccount,
    TAccountLiquidatorUserAccount,
    TAccountLiquidatorBorrowedTokenAccount,
    TAccountLiquidatorCollateralTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): LiquidateInstruction<
  TProgramAddress,
  TAccountLiquidator,
  TAccountPriceUpdateAccount,
  TAccountCollateralMint,
  TAccountBorrowedMint,
  TAccountCollateralBank,
  TAccountCollateralBankTokenAccount,
  TAccountBorrowedBank,
  TAccountBorrowedBankTokenAccount,
  TAccountLiquidatorUserAccount,
  TAccountLiquidatorBorrowedTokenAccount,
  TAccountLiquidatorCollateralTokenAccount,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LENDING_PROTOCOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    liquidator: { value: input.liquidator ?? null, isWritable: true },
    priceUpdateAccount: {
      value: input.priceUpdateAccount ?? null,
      isWritable: true,
    },
    collateralMint: { value: input.collateralMint ?? null, isWritable: false },
    borrowedMint: { value: input.borrowedMint ?? null, isWritable: false },
    collateralBank: { value: input.collateralBank ?? null, isWritable: true },
    collateralBankTokenAccount: {
      value: input.collateralBankTokenAccount ?? null,
      isWritable: true,
    },
    borrowedBank: { value: input.borrowedBank ?? null, isWritable: true },
    borrowedBankTokenAccount: {
      value: input.borrowedBankTokenAccount ?? null,
      isWritable: true,
    },
    liquidatorUserAccount: {
      value: input.liquidatorUserAccount ?? null,
      isWritable: true,
    },
    liquidatorBorrowedTokenAccount: {
      value: input.liquidatorBorrowedTokenAccount ?? null,
      isWritable: true,
    },
    liquidatorCollateralTokenAccount: {
      value: input.liquidatorCollateralTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.liquidator),
      getAccountMeta(accounts.priceUpdateAccount),
      getAccountMeta(accounts.collateralMint),
      getAccountMeta(accounts.borrowedMint),
      getAccountMeta(accounts.collateralBank),
      getAccountMeta(accounts.collateralBankTokenAccount),
      getAccountMeta(accounts.borrowedBank),
      getAccountMeta(accounts.borrowedBankTokenAccount),
      getAccountMeta(accounts.liquidatorUserAccount),
      getAccountMeta(accounts.liquidatorBorrowedTokenAccount),
      getAccountMeta(accounts.liquidatorCollateralTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    data: getLiquidateInstructionDataEncoder().encode({}),
    programAddress,
  } as LiquidateInstruction<
    TProgramAddress,
    TAccountLiquidator,
    TAccountPriceUpdateAccount,
    TAccountCollateralMint,
    TAccountBorrowedMint,
    TAccountCollateralBank,
    TAccountCollateralBankTokenAccount,
    TAccountBorrowedBank,
    TAccountBorrowedBankTokenAccount,
    TAccountLiquidatorUserAccount,
    TAccountLiquidatorBorrowedTokenAccount,
    TAccountLiquidatorCollateralTokenAccount,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >);
}

export type ParsedLiquidateInstruction<
  TProgram extends string = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    liquidator: TAccountMetas[0];
    priceUpdateAccount: TAccountMetas[1];
    /** Mints for the collateral and borrowed asset */
    collateralMint: TAccountMetas[2];
    borrowedMint: TAccountMetas[3];
    /**
     * Defining borrowed and collateral bank account for there respective token accounts
     * Collateral bank account
     */
    collateralBank: TAccountMetas[4];
    /** Collateral Bank token account */
    collateralBankTokenAccount: TAccountMetas[5];
    /** Borrowed bank account */
    borrowedBank: TAccountMetas[6];
    /** Borrowed Bank token account */
    borrowedBankTokenAccount: TAccountMetas[7];
    /** User account for the liquidator */
    liquidatorUserAccount: TAccountMetas[8];
    /** Liquidator's borrowed token account */
    liquidatorBorrowedTokenAccount: TAccountMetas[9];
    /** Liquidator's collateral token account */
    liquidatorCollateralTokenAccount: TAccountMetas[10];
    /** System program */
    systemProgram: TAccountMetas[11];
    /** Token program */
    tokenProgram: TAccountMetas[12];
    /** Associated token program */
    associatedTokenProgram: TAccountMetas[13];
  };
  data: LiquidateInstructionData;
};

export function parseLiquidateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedLiquidateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      liquidator: getNextAccount(),
      priceUpdateAccount: getNextAccount(),
      collateralMint: getNextAccount(),
      borrowedMint: getNextAccount(),
      collateralBank: getNextAccount(),
      collateralBankTokenAccount: getNextAccount(),
      borrowedBank: getNextAccount(),
      borrowedBankTokenAccount: getNextAccount(),
      liquidatorUserAccount: getNextAccount(),
      liquidatorBorrowedTokenAccount: getNextAccount(),
      liquidatorCollateralTokenAccount: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getLiquidateInstructionDataDecoder().decode(instruction.data),
  };
}
