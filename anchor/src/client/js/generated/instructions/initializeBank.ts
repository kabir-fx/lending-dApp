/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { LENDING_PROTOCOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_BANK_DISCRIMINATOR = new Uint8Array([
  217, 55, 77, 45, 245, 197, 75, 140,
]);

export function getInitializeBankDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_BANK_DISCRIMINATOR
  );
}

export type InitializeBankInstruction<
  TProgram extends string = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountBank extends string | AccountMeta<string> = string,
  TAccountBankTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountBank extends string
        ? WritableAccount<TAccountBank>
        : TAccountBank,
      TAccountBankTokenAccount extends string
        ? WritableAccount<TAccountBankTokenAccount>
        : TAccountBankTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeBankInstructionData = {
  discriminator: ReadonlyUint8Array;
  liquidationThreshold: bigint;
  maxLtv: bigint;
};

export type InitializeBankInstructionDataArgs = {
  liquidationThreshold: number | bigint;
  maxLtv: number | bigint;
};

export function getInitializeBankInstructionDataEncoder(): FixedSizeEncoder<InitializeBankInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['liquidationThreshold', getU64Encoder()],
      ['maxLtv', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_BANK_DISCRIMINATOR })
  );
}

export function getInitializeBankInstructionDataDecoder(): FixedSizeDecoder<InitializeBankInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['liquidationThreshold', getU64Decoder()],
    ['maxLtv', getU64Decoder()],
  ]);
}

export function getInitializeBankInstructionDataCodec(): FixedSizeCodec<
  InitializeBankInstructionDataArgs,
  InitializeBankInstructionData
> {
  return combineCodec(
    getInitializeBankInstructionDataEncoder(),
    getInitializeBankInstructionDataDecoder()
  );
}

export type InitializeBankAsyncInput<
  TAccountSigner extends string = string,
  TAccountMint extends string = string,
  TAccountBank extends string = string,
  TAccountBankTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  /** The mint address of asset of the bank */
  mint: Address<TAccountMint>;
  /** Initialize the bank account */
  bank?: Address<TAccountBank>;
  /**
   * Token account to hold the tokens for the bank
   *
   * We are not using an Associated Token Account instead - a Token Account with a PDA so we are able to know that this account is specific to lending protocol bank.
   */
  bankTokenAccount?: Address<TAccountBankTokenAccount>;
  /**
   * Token program to create the token account.
   *
   * When you use Interface<'info, TokenInterface>, Anchor automatically determines which token program to use based on the accounts passed in
   */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** System program to initialize the bank account */
  systemProgram?: Address<TAccountSystemProgram>;
  liquidationThreshold: InitializeBankInstructionDataArgs['liquidationThreshold'];
  maxLtv: InitializeBankInstructionDataArgs['maxLtv'];
};

export async function getInitializeBankInstructionAsync<
  TAccountSigner extends string,
  TAccountMint extends string,
  TAccountBank extends string,
  TAccountBankTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
>(
  input: InitializeBankAsyncInput<
    TAccountSigner,
    TAccountMint,
    TAccountBank,
    TAccountBankTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeBankInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountMint,
    TAccountBank,
    TAccountBankTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LENDING_PROTOCOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    bank: { value: input.bank ?? null, isWritable: true },
    bankTokenAccount: {
      value: input.bankTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.bank.value) {
    accounts.bank.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getAddressEncoder().encode(expectAddress(accounts.mint.value))],
    });
  }
  if (!accounts.bankTokenAccount.value) {
    accounts.bankTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([84, 114, 101, 97, 115, 117, 114, 121])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.bank),
      getAccountMeta(accounts.bankTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeBankInstructionDataEncoder().encode(
      args as InitializeBankInstructionDataArgs
    ),
    programAddress,
  } as InitializeBankInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountMint,
    TAccountBank,
    TAccountBankTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type InitializeBankInput<
  TAccountSigner extends string = string,
  TAccountMint extends string = string,
  TAccountBank extends string = string,
  TAccountBankTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  /** The mint address of asset of the bank */
  mint: Address<TAccountMint>;
  /** Initialize the bank account */
  bank: Address<TAccountBank>;
  /**
   * Token account to hold the tokens for the bank
   *
   * We are not using an Associated Token Account instead - a Token Account with a PDA so we are able to know that this account is specific to lending protocol bank.
   */
  bankTokenAccount: Address<TAccountBankTokenAccount>;
  /**
   * Token program to create the token account.
   *
   * When you use Interface<'info, TokenInterface>, Anchor automatically determines which token program to use based on the accounts passed in
   */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** System program to initialize the bank account */
  systemProgram?: Address<TAccountSystemProgram>;
  liquidationThreshold: InitializeBankInstructionDataArgs['liquidationThreshold'];
  maxLtv: InitializeBankInstructionDataArgs['maxLtv'];
};

export function getInitializeBankInstruction<
  TAccountSigner extends string,
  TAccountMint extends string,
  TAccountBank extends string,
  TAccountBankTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
>(
  input: InitializeBankInput<
    TAccountSigner,
    TAccountMint,
    TAccountBank,
    TAccountBankTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeBankInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountMint,
  TAccountBank,
  TAccountBankTokenAccount,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LENDING_PROTOCOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    bank: { value: input.bank ?? null, isWritable: true },
    bankTokenAccount: {
      value: input.bankTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.bank),
      getAccountMeta(accounts.bankTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeBankInstructionDataEncoder().encode(
      args as InitializeBankInstructionDataArgs
    ),
    programAddress,
  } as InitializeBankInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountMint,
    TAccountBank,
    TAccountBankTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeBankInstruction<
  TProgram extends string = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    /** The mint address of asset of the bank */
    mint: TAccountMetas[1];
    /** Initialize the bank account */
    bank: TAccountMetas[2];
    /**
     * Token account to hold the tokens for the bank
     *
     * We are not using an Associated Token Account instead - a Token Account with a PDA so we are able to know that this account is specific to lending protocol bank.
     */
    bankTokenAccount: TAccountMetas[3];
    /**
     * Token program to create the token account.
     *
     * When you use Interface<'info, TokenInterface>, Anchor automatically determines which token program to use based on the accounts passed in
     */
    tokenProgram: TAccountMetas[4];
    /** System program to initialize the bank account */
    systemProgram: TAccountMetas[5];
  };
  data: InitializeBankInstructionData;
};

export function parseInitializeBankInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeBankInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      mint: getNextAccount(),
      bank: getNextAccount(),
      bankTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeBankInstructionDataDecoder().decode(instruction.data),
  };
}
