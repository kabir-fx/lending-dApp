/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { LENDING_PROTOCOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  74, 115, 99, 93, 197, 69, 103, 7,
]);

export function getInitializeAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_ACCOUNT_DISCRIMINATOR
  );
}

export type InitializeAccountInstruction<
  TProgram extends string = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountUserAccount extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountUserAccount extends string
        ? WritableAccount<TAccountUserAccount>
        : TAccountUserAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeAccountInstructionDataArgs = {};

export function getInitializeAccountInstructionDataEncoder(): FixedSizeEncoder<InitializeAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INITIALIZE_ACCOUNT_DISCRIMINATOR })
  );
}

export function getInitializeAccountInstructionDataDecoder(): FixedSizeDecoder<InitializeAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeAccountInstructionDataCodec(): FixedSizeCodec<
  InitializeAccountInstructionDataArgs,
  InitializeAccountInstructionData
> {
  return combineCodec(
    getInitializeAccountInstructionDataEncoder(),
    getInitializeAccountInstructionDataDecoder()
  );
}

export type InitializeAccountAsyncInput<
  TAccountSigner extends string = string,
  TAccountUserAccount extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  /** Initialize the user account */
  userAccount?: Address<TAccountUserAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeAccountInstructionAsync<
  TAccountSigner extends string,
  TAccountUserAccount extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
>(
  input: InitializeAccountAsyncInput<
    TAccountSigner,
    TAccountUserAccount,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeAccountInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountUserAccount,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LENDING_PROTOCOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    userAccount: { value: input.userAccount ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.userAccount.value) {
    accounts.userAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getAddressEncoder().encode(expectAddress(accounts.signer.value))],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.userAccount),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeAccountInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeAccountInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountUserAccount,
    TAccountSystemProgram
  >);
}

export type InitializeAccountInput<
  TAccountSigner extends string = string,
  TAccountUserAccount extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  /** Initialize the user account */
  userAccount: Address<TAccountUserAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeAccountInstruction<
  TAccountSigner extends string,
  TAccountUserAccount extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
>(
  input: InitializeAccountInput<
    TAccountSigner,
    TAccountUserAccount,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeAccountInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountUserAccount,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LENDING_PROTOCOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    userAccount: { value: input.userAccount ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.userAccount),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeAccountInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeAccountInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountUserAccount,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeAccountInstruction<
  TProgram extends string = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    /** Initialize the user account */
    userAccount: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeAccountInstructionData;
};

export function parseInitializeAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      userAccount: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeAccountInstructionDataDecoder().decode(instruction.data),
  };
}
