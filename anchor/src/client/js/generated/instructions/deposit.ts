/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { LENDING_PROTOCOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getTokenTypeDecoder,
  getTokenTypeEncoder,
  type TokenType,
  type TokenTypeArgs,
} from '../types';

export const DEPOSIT_DISCRIMINATOR = new Uint8Array([
  242, 35, 198, 137, 82, 225, 242, 182,
]);

export function getDepositDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(DEPOSIT_DISCRIMINATOR);
}

export type DepositInstruction<
  TProgram extends string = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountBank extends string | AccountMeta<string> = string,
  TAccountBankTokenAccount extends string | AccountMeta<string> = string,
  TAccountUserAccount extends string | AccountMeta<string> = string,
  TAccountUserTokenAccount extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountBank extends string
        ? WritableAccount<TAccountBank>
        : TAccountBank,
      TAccountBankTokenAccount extends string
        ? WritableAccount<TAccountBankTokenAccount>
        : TAccountBankTokenAccount,
      TAccountUserAccount extends string
        ? WritableAccount<TAccountUserAccount>
        : TAccountUserAccount,
      TAccountUserTokenAccount extends string
        ? WritableAccount<TAccountUserTokenAccount>
        : TAccountUserTokenAccount,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DepositInstructionData = {
  discriminator: ReadonlyUint8Array;
  amountToDeposit: bigint;
  tokenType: TokenType;
};

export type DepositInstructionDataArgs = {
  amountToDeposit: number | bigint;
  tokenType: TokenTypeArgs;
};

export function getDepositInstructionDataEncoder(): FixedSizeEncoder<DepositInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amountToDeposit', getU64Encoder()],
      ['tokenType', getTokenTypeEncoder()],
    ]),
    (value) => ({ ...value, discriminator: DEPOSIT_DISCRIMINATOR })
  );
}

export function getDepositInstructionDataDecoder(): FixedSizeDecoder<DepositInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amountToDeposit', getU64Decoder()],
    ['tokenType', getTokenTypeDecoder()],
  ]);
}

export function getDepositInstructionDataCodec(): FixedSizeCodec<
  DepositInstructionDataArgs,
  DepositInstructionData
> {
  return combineCodec(
    getDepositInstructionDataEncoder(),
    getDepositInstructionDataDecoder()
  );
}

export type DepositAsyncInput<
  TAccountSigner extends string = string,
  TAccountMint extends string = string,
  TAccountBank extends string = string,
  TAccountBankTokenAccount extends string = string,
  TAccountUserAccount extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The signer of the transaction */
  signer: TransactionSigner<TAccountSigner>;
  /** The mint address of the asset to be deposited */
  mint: Address<TAccountMint>;
  /** The bank account to deposit the asset to */
  bank?: Address<TAccountBank>;
  /** The bank token account to deposit the tokens */
  bankTokenAccount?: Address<TAccountBankTokenAccount>;
  /** The user account that stores the state of the user */
  userAccount?: Address<TAccountUserAccount>;
  /**
   * Account that will take the tokens we are depositing and transfer them to the bank token account
   *
   * This will be an Associated Token Account for the mint address of the asset we are depositing into the bank.
   */
  userTokenAccount?: Address<TAccountUserTokenAccount>;
  /** Associated token program to create the associated token account */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** Token program to create the token account. */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** System program to create the account */
  systemProgram?: Address<TAccountSystemProgram>;
  amountToDeposit: DepositInstructionDataArgs['amountToDeposit'];
  tokenType: DepositInstructionDataArgs['tokenType'];
};

export async function getDepositInstructionAsync<
  TAccountSigner extends string,
  TAccountMint extends string,
  TAccountBank extends string,
  TAccountBankTokenAccount extends string,
  TAccountUserAccount extends string,
  TAccountUserTokenAccount extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
>(
  input: DepositAsyncInput<
    TAccountSigner,
    TAccountMint,
    TAccountBank,
    TAccountBankTokenAccount,
    TAccountUserAccount,
    TAccountUserTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DepositInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountMint,
    TAccountBank,
    TAccountBankTokenAccount,
    TAccountUserAccount,
    TAccountUserTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LENDING_PROTOCOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    bank: { value: input.bank ?? null, isWritable: true },
    bankTokenAccount: {
      value: input.bankTokenAccount ?? null,
      isWritable: true,
    },
    userAccount: { value: input.userAccount ?? null, isWritable: true },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.bank.value) {
    accounts.bank.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getAddressEncoder().encode(expectAddress(accounts.mint.value))],
    });
  }
  if (!accounts.bankTokenAccount.value) {
    accounts.bankTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([84, 114, 101, 97, 115, 117, 114, 121])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.userAccount.value) {
    accounts.userAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getAddressEncoder().encode(expectAddress(accounts.signer.value))],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.userTokenAccount.value) {
    accounts.userTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.bank),
      getAccountMeta(accounts.bankTokenAccount),
      getAccountMeta(accounts.userAccount),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getDepositInstructionDataEncoder().encode(
      args as DepositInstructionDataArgs
    ),
    programAddress,
  } as DepositInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountMint,
    TAccountBank,
    TAccountBankTokenAccount,
    TAccountUserAccount,
    TAccountUserTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type DepositInput<
  TAccountSigner extends string = string,
  TAccountMint extends string = string,
  TAccountBank extends string = string,
  TAccountBankTokenAccount extends string = string,
  TAccountUserAccount extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The signer of the transaction */
  signer: TransactionSigner<TAccountSigner>;
  /** The mint address of the asset to be deposited */
  mint: Address<TAccountMint>;
  /** The bank account to deposit the asset to */
  bank: Address<TAccountBank>;
  /** The bank token account to deposit the tokens */
  bankTokenAccount: Address<TAccountBankTokenAccount>;
  /** The user account that stores the state of the user */
  userAccount: Address<TAccountUserAccount>;
  /**
   * Account that will take the tokens we are depositing and transfer them to the bank token account
   *
   * This will be an Associated Token Account for the mint address of the asset we are depositing into the bank.
   */
  userTokenAccount: Address<TAccountUserTokenAccount>;
  /** Associated token program to create the associated token account */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** Token program to create the token account. */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** System program to create the account */
  systemProgram?: Address<TAccountSystemProgram>;
  amountToDeposit: DepositInstructionDataArgs['amountToDeposit'];
  tokenType: DepositInstructionDataArgs['tokenType'];
};

export function getDepositInstruction<
  TAccountSigner extends string,
  TAccountMint extends string,
  TAccountBank extends string,
  TAccountBankTokenAccount extends string,
  TAccountUserAccount extends string,
  TAccountUserTokenAccount extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
>(
  input: DepositInput<
    TAccountSigner,
    TAccountMint,
    TAccountBank,
    TAccountBankTokenAccount,
    TAccountUserAccount,
    TAccountUserTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DepositInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountMint,
  TAccountBank,
  TAccountBankTokenAccount,
  TAccountUserAccount,
  TAccountUserTokenAccount,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? LENDING_PROTOCOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    bank: { value: input.bank ?? null, isWritable: true },
    bankTokenAccount: {
      value: input.bankTokenAccount ?? null,
      isWritable: true,
    },
    userAccount: { value: input.userAccount ?? null, isWritable: true },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.bank),
      getAccountMeta(accounts.bankTokenAccount),
      getAccountMeta(accounts.userAccount),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getDepositInstructionDataEncoder().encode(
      args as DepositInstructionDataArgs
    ),
    programAddress,
  } as DepositInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountMint,
    TAccountBank,
    TAccountBankTokenAccount,
    TAccountUserAccount,
    TAccountUserTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedDepositInstruction<
  TProgram extends string = typeof LENDING_PROTOCOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The signer of the transaction */
    signer: TAccountMetas[0];
    /** The mint address of the asset to be deposited */
    mint: TAccountMetas[1];
    /** The bank account to deposit the asset to */
    bank: TAccountMetas[2];
    /** The bank token account to deposit the tokens */
    bankTokenAccount: TAccountMetas[3];
    /** The user account that stores the state of the user */
    userAccount: TAccountMetas[4];
    /**
     * Account that will take the tokens we are depositing and transfer them to the bank token account
     *
     * This will be an Associated Token Account for the mint address of the asset we are depositing into the bank.
     */
    userTokenAccount: TAccountMetas[5];
    /** Associated token program to create the associated token account */
    associatedTokenProgram: TAccountMetas[6];
    /** Token program to create the token account. */
    tokenProgram: TAccountMetas[7];
    /** System program to create the account */
    systemProgram: TAccountMetas[8];
  };
  data: DepositInstructionData;
};

export function parseDepositInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDepositInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      mint: getNextAccount(),
      bank: getNextAccount(),
      bankTokenAccount: getNextAccount(),
      userAccount: getNextAccount(),
      userTokenAccount: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDepositInstructionDataDecoder().decode(instruction.data),
  };
}
