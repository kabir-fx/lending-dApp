/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedCloseInstruction,
  type ParsedDecrementInstruction,
  type ParsedIncrementInstruction,
  type ParsedInitializeInstruction,
  type ParsedSetInstruction,
} from '../instructions';

export const LENDINGDAPP_PROGRAM_ADDRESS =
  'Count3AcZucFDPSFBAeHkQ6AvttieKUkyJ8HiQGhQwe' as Address<'Count3AcZucFDPSFBAeHkQ6AvttieKUkyJ8HiQGhQwe'>;

export enum LendingdappAccount {
  Lendingdapp,
}

export function identifyLendingdappAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LendingdappAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([255, 176, 4, 245, 188, 253, 124, 25])
      ),
      0
    )
  ) {
    return LendingdappAccount.Lendingdapp;
  }
  throw new Error(
    'The provided account could not be identified as a lendingdapp account.'
  );
}

export enum LendingdappInstruction {
  Close,
  Decrement,
  Increment,
  Initialize,
  Set,
}

export function identifyLendingdappInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LendingdappInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([98, 165, 201, 177, 108, 65, 206, 96])
      ),
      0
    )
  ) {
    return LendingdappInstruction.Close;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([106, 227, 168, 59, 248, 27, 150, 101])
      ),
      0
    )
  ) {
    return LendingdappInstruction.Decrement;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([11, 18, 104, 9, 104, 174, 59, 33])
      ),
      0
    )
  ) {
    return LendingdappInstruction.Increment;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return LendingdappInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([198, 51, 53, 241, 116, 29, 126, 194])
      ),
      0
    )
  ) {
    return LendingdappInstruction.Set;
  }
  throw new Error(
    'The provided instruction could not be identified as a lendingdapp instruction.'
  );
}

export type ParsedLendingdappInstruction<
  TProgram extends string = 'Count3AcZucFDPSFBAeHkQ6AvttieKUkyJ8HiQGhQwe',
> =
  | ({
      instructionType: LendingdappInstruction.Close;
    } & ParsedCloseInstruction<TProgram>)
  | ({
      instructionType: LendingdappInstruction.Decrement;
    } & ParsedDecrementInstruction<TProgram>)
  | ({
      instructionType: LendingdappInstruction.Increment;
    } & ParsedIncrementInstruction<TProgram>)
  | ({
      instructionType: LendingdappInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: LendingdappInstruction.Set;
    } & ParsedSetInstruction<TProgram>);
