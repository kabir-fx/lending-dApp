/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedBorrowInstruction,
  type ParsedDepositInstruction,
  type ParsedInitializeAccountInstruction,
  type ParsedInitializeBankInstruction,
  type ParsedLiquidateInstruction,
  type ParsedRepayInstruction,
  type ParsedWithdrawInstruction,
} from '../instructions';

export const LENDING_PROTOCOL_PROGRAM_ADDRESS =
  '9CoY42r3y5WFDJjQX97e9m9THcVGpvuVSKjBjGkiksMR' as Address<'9CoY42r3y5WFDJjQX97e9m9THcVGpvuVSKjBjGkiksMR'>;

export enum LendingProtocolAccount {
  Bank,
  PriceUpdateV2,
  User,
}

export function identifyLendingProtocolAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LendingProtocolAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([142, 49, 166, 242, 50, 66, 97, 188])
      ),
      0
    )
  ) {
    return LendingProtocolAccount.Bank;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([34, 241, 35, 99, 157, 126, 244, 205])
      ),
      0
    )
  ) {
    return LendingProtocolAccount.PriceUpdateV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([159, 117, 95, 227, 239, 151, 58, 236])
      ),
      0
    )
  ) {
    return LendingProtocolAccount.User;
  }
  throw new Error(
    'The provided account could not be identified as a lendingProtocol account.'
  );
}

export enum LendingProtocolInstruction {
  Borrow,
  Deposit,
  InitializeAccount,
  InitializeBank,
  Liquidate,
  Repay,
  Withdraw,
}

export function identifyLendingProtocolInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LendingProtocolInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([228, 253, 131, 202, 207, 116, 89, 18])
      ),
      0
    )
  ) {
    return LendingProtocolInstruction.Borrow;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 35, 198, 137, 82, 225, 242, 182])
      ),
      0
    )
  ) {
    return LendingProtocolInstruction.Deposit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([74, 115, 99, 93, 197, 69, 103, 7])
      ),
      0
    )
  ) {
    return LendingProtocolInstruction.InitializeAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([217, 55, 77, 45, 245, 197, 75, 140])
      ),
      0
    )
  ) {
    return LendingProtocolInstruction.InitializeBank;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([223, 179, 226, 125, 48, 46, 39, 74])
      ),
      0
    )
  ) {
    return LendingProtocolInstruction.Liquidate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([234, 103, 67, 82, 208, 234, 219, 166])
      ),
      0
    )
  ) {
    return LendingProtocolInstruction.Repay;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 18, 70, 156, 148, 109, 161, 34])
      ),
      0
    )
  ) {
    return LendingProtocolInstruction.Withdraw;
  }
  throw new Error(
    'The provided instruction could not be identified as a lendingProtocol instruction.'
  );
}

export type ParsedLendingProtocolInstruction<
  TProgram extends string = '9CoY42r3y5WFDJjQX97e9m9THcVGpvuVSKjBjGkiksMR',
> =
  | ({
      instructionType: LendingProtocolInstruction.Borrow;
    } & ParsedBorrowInstruction<TProgram>)
  | ({
      instructionType: LendingProtocolInstruction.Deposit;
    } & ParsedDepositInstruction<TProgram>)
  | ({
      instructionType: LendingProtocolInstruction.InitializeAccount;
    } & ParsedInitializeAccountInstruction<TProgram>)
  | ({
      instructionType: LendingProtocolInstruction.InitializeBank;
    } & ParsedInitializeBankInstruction<TProgram>)
  | ({
      instructionType: LendingProtocolInstruction.Liquidate;
    } & ParsedLiquidateInstruction<TProgram>)
  | ({
      instructionType: LendingProtocolInstruction.Repay;
    } & ParsedRepayInstruction<TProgram>)
  | ({
      instructionType: LendingProtocolInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>);
