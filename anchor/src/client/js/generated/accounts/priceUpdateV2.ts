/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';
import {
  getPriceFeedMessageDecoder,
  getPriceFeedMessageEncoder,
  getVerificationLevelDecoder,
  getVerificationLevelEncoder,
  type PriceFeedMessage,
  type PriceFeedMessageArgs,
  type VerificationLevel,
  type VerificationLevelArgs,
} from '../types';

export const PRICE_UPDATE_V2_DISCRIMINATOR = new Uint8Array([
  34, 241, 35, 99, 157, 126, 244, 205,
]);

export function getPriceUpdateV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PRICE_UPDATE_V2_DISCRIMINATOR
  );
}

export type PriceUpdateV2 = {
  discriminator: ReadonlyUint8Array;
  writeAuthority: Address;
  verificationLevel: VerificationLevel;
  priceMessage: PriceFeedMessage;
  postedSlot: bigint;
};

export type PriceUpdateV2Args = {
  writeAuthority: Address;
  verificationLevel: VerificationLevelArgs;
  priceMessage: PriceFeedMessageArgs;
  postedSlot: number | bigint;
};

export function getPriceUpdateV2Encoder(): Encoder<PriceUpdateV2Args> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['writeAuthority', getAddressEncoder()],
      ['verificationLevel', getVerificationLevelEncoder()],
      ['priceMessage', getPriceFeedMessageEncoder()],
      ['postedSlot', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PRICE_UPDATE_V2_DISCRIMINATOR })
  );
}

export function getPriceUpdateV2Decoder(): Decoder<PriceUpdateV2> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['writeAuthority', getAddressDecoder()],
    ['verificationLevel', getVerificationLevelDecoder()],
    ['priceMessage', getPriceFeedMessageDecoder()],
    ['postedSlot', getU64Decoder()],
  ]);
}

export function getPriceUpdateV2Codec(): Codec<
  PriceUpdateV2Args,
  PriceUpdateV2
> {
  return combineCodec(getPriceUpdateV2Encoder(), getPriceUpdateV2Decoder());
}

export function decodePriceUpdateV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PriceUpdateV2, TAddress>;
export function decodePriceUpdateV2<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PriceUpdateV2, TAddress>;
export function decodePriceUpdateV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<PriceUpdateV2, TAddress> | MaybeAccount<PriceUpdateV2, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPriceUpdateV2Decoder()
  );
}

export async function fetchPriceUpdateV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PriceUpdateV2, TAddress>> {
  const maybeAccount = await fetchMaybePriceUpdateV2(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePriceUpdateV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PriceUpdateV2, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePriceUpdateV2(maybeAccount);
}

export async function fetchAllPriceUpdateV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PriceUpdateV2>[]> {
  const maybeAccounts = await fetchAllMaybePriceUpdateV2(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePriceUpdateV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PriceUpdateV2>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePriceUpdateV2(maybeAccount));
}
