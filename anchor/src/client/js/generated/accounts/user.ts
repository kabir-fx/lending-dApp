/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const USER_DISCRIMINATOR = new Uint8Array([
  159, 117, 95, 227, 239, 151, 58, 236,
]);

export function getUserDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(USER_DISCRIMINATOR);
}

export type User = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  depositedSol: bigint;
  depositedSolShares: bigint;
  borrowedSol: bigint;
  borrowedSolShares: bigint;
  depositedUsdc: bigint;
  depositedUsdcShares: bigint;
  borrowedUsdc: bigint;
  borrowedUsdcShares: bigint;
  usdcAddress: Address;
  lastUpdated: bigint;
};

export type UserArgs = {
  owner: Address;
  depositedSol: number | bigint;
  depositedSolShares: number | bigint;
  borrowedSol: number | bigint;
  borrowedSolShares: number | bigint;
  depositedUsdc: number | bigint;
  depositedUsdcShares: number | bigint;
  borrowedUsdc: number | bigint;
  borrowedUsdcShares: number | bigint;
  usdcAddress: Address;
  lastUpdated: number | bigint;
};

export function getUserEncoder(): FixedSizeEncoder<UserArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['depositedSol', getU64Encoder()],
      ['depositedSolShares', getU64Encoder()],
      ['borrowedSol', getU64Encoder()],
      ['borrowedSolShares', getU64Encoder()],
      ['depositedUsdc', getU64Encoder()],
      ['depositedUsdcShares', getU64Encoder()],
      ['borrowedUsdc', getU64Encoder()],
      ['borrowedUsdcShares', getU64Encoder()],
      ['usdcAddress', getAddressEncoder()],
      ['lastUpdated', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: USER_DISCRIMINATOR })
  );
}

export function getUserDecoder(): FixedSizeDecoder<User> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['depositedSol', getU64Decoder()],
    ['depositedSolShares', getU64Decoder()],
    ['borrowedSol', getU64Decoder()],
    ['borrowedSolShares', getU64Decoder()],
    ['depositedUsdc', getU64Decoder()],
    ['depositedUsdcShares', getU64Decoder()],
    ['borrowedUsdc', getU64Decoder()],
    ['borrowedUsdcShares', getU64Decoder()],
    ['usdcAddress', getAddressDecoder()],
    ['lastUpdated', getI64Decoder()],
  ]);
}

export function getUserCodec(): FixedSizeCodec<UserArgs, User> {
  return combineCodec(getUserEncoder(), getUserDecoder());
}

export function decodeUser<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<User, TAddress>;
export function decodeUser<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<User, TAddress>;
export function decodeUser<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<User, TAddress> | MaybeAccount<User, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserDecoder()
  );
}

export async function fetchUser<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<User, TAddress>> {
  const maybeAccount = await fetchMaybeUser(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUser<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<User, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUser(maybeAccount);
}

export async function fetchAllUser(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<User>[]> {
  const maybeAccounts = await fetchAllMaybeUser(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUser(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<User>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUser(maybeAccount));
}

export function getUserSize(): number {
  return 144;
}
