/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const BANK_DISCRIMINATOR = new Uint8Array([
  142, 49, 166, 242, 50, 66, 97, 188,
]);

export function getBankDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BANK_DISCRIMINATOR);
}

export type Bank = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  /** The mint address of the asset. Mint is a spl token program used to create the asset. */
  mintAddress: Address;
  /** The total amount of deposits in the bank. */
  totalDeposits: bigint;
  /** The total amount of deposits shares in the bank. */
  totalDepositsShares: bigint;
  /** The total amount of borrows in the bank. */
  totalBorrows: bigint;
  /** The total amount of borrows shares in the bank. */
  totalBorrowsShares: bigint;
  /**
   * Since all the accounts in the protocal can be liquidated, we need all these constants to calculate whether an account is healthy or not.
   *
   * Loan to value at which a loan is defined as under-collateralized and can be liquidated.
   */
  liquidationThreshold: bigint;
  /** % of bonus that will be given to the liquidator as bonus for processing the liquidation. */
  liquidationBonus: bigint;
  /** % of collateral that can be liquidated */
  liquidationCloseFactor: bigint;
  /** Maximum percentage of collateral that can be borrowed for a specific asset. Collateral is the asset that is used to secure the loan */
  maxLtv: bigint;
  interestRate: bigint;
  lastUpdated: bigint;
};

export type BankArgs = {
  authority: Address;
  /** The mint address of the asset. Mint is a spl token program used to create the asset. */
  mintAddress: Address;
  /** The total amount of deposits in the bank. */
  totalDeposits: number | bigint;
  /** The total amount of deposits shares in the bank. */
  totalDepositsShares: number | bigint;
  /** The total amount of borrows in the bank. */
  totalBorrows: number | bigint;
  /** The total amount of borrows shares in the bank. */
  totalBorrowsShares: number | bigint;
  /**
   * Since all the accounts in the protocal can be liquidated, we need all these constants to calculate whether an account is healthy or not.
   *
   * Loan to value at which a loan is defined as under-collateralized and can be liquidated.
   */
  liquidationThreshold: number | bigint;
  /** % of bonus that will be given to the liquidator as bonus for processing the liquidation. */
  liquidationBonus: number | bigint;
  /** % of collateral that can be liquidated */
  liquidationCloseFactor: number | bigint;
  /** Maximum percentage of collateral that can be borrowed for a specific asset. Collateral is the asset that is used to secure the loan */
  maxLtv: number | bigint;
  interestRate: number | bigint;
  lastUpdated: number | bigint;
};

export function getBankEncoder(): FixedSizeEncoder<BankArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['mintAddress', getAddressEncoder()],
      ['totalDeposits', getU64Encoder()],
      ['totalDepositsShares', getU64Encoder()],
      ['totalBorrows', getU64Encoder()],
      ['totalBorrowsShares', getU64Encoder()],
      ['liquidationThreshold', getU64Encoder()],
      ['liquidationBonus', getU64Encoder()],
      ['liquidationCloseFactor', getU64Encoder()],
      ['maxLtv', getU64Encoder()],
      ['interestRate', getU64Encoder()],
      ['lastUpdated', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BANK_DISCRIMINATOR })
  );
}

export function getBankDecoder(): FixedSizeDecoder<Bank> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['mintAddress', getAddressDecoder()],
    ['totalDeposits', getU64Decoder()],
    ['totalDepositsShares', getU64Decoder()],
    ['totalBorrows', getU64Decoder()],
    ['totalBorrowsShares', getU64Decoder()],
    ['liquidationThreshold', getU64Decoder()],
    ['liquidationBonus', getU64Decoder()],
    ['liquidationCloseFactor', getU64Decoder()],
    ['maxLtv', getU64Decoder()],
    ['interestRate', getU64Decoder()],
    ['lastUpdated', getI64Decoder()],
  ]);
}

export function getBankCodec(): FixedSizeCodec<BankArgs, Bank> {
  return combineCodec(getBankEncoder(), getBankDecoder());
}

export function decodeBank<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Bank, TAddress>;
export function decodeBank<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Bank, TAddress>;
export function decodeBank<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Bank, TAddress> | MaybeAccount<Bank, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBankDecoder()
  );
}

export async function fetchBank<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Bank, TAddress>> {
  const maybeAccount = await fetchMaybeBank(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBank<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Bank, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBank(maybeAccount);
}

export async function fetchAllBank(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Bank>[]> {
  const maybeAccounts = await fetchAllMaybeBank(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBank(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Bank>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeBank(maybeAccount));
}

export function getBankSize(): number {
  return 152;
}
